[Whonix Homepage](https://sourceforge.net/p/whonix/wiki/Home/)

[TOC]

    # Copyright:
    # adrelanos (aka proper)
    # adrelanos (at) riseup (dot) net
    #
    # License:
    # GPL v3 or any later
    #
    # Any changes you pull into this source will be also licensed
    # under GPL v3 or any later. Additionally you grant adrelanos the right to
    # re-license your work under a different license. If that is not acceptable,
    # you can either fork this source under GPL v3 or any later or contact
    # adrelanos. Contact adrelanos, if you require this source code under
    # different license.
    #
    # Authors:
    # adrelanos (aka proper)
    # Big contributions from anonymous.
    # Leaktest and other stuff contributed by smarm.

This page documents how the binary distribution images are built. If you have any questions or need help let us know on [Dev].

Following these instructions will build version Whonix 0.4.5 based on Tor 0.2.3 and Debian Wheezy.

Knowledge assumed: Virtualization and networking basic principles; operation of your platform; Linux knowledge: how to install Debian and basic command line knowledge.

Only one prerequisites: you need a working internet connection.

For discussion related to the development and build process of Whonix images go [Dev].

# Build Anonymity #
While downloading the required tools for building Whonix your internet service provider could if he want notice that you want to build Whonix. This is especially interesting, if you want to redistribute Whonix, but still want to stay anonymous. The full story can be read in the chapter [Build Anonymity](https://sourceforge.net/p/whonix/wiki/Security/#build-anonymity).

# Build Security #
* Build on a dedicated build system, install security updates...
* All install media and all downloaded/used code must be verified (including all software on the host).
* Hashes, fingerprints  in the scripts and the wiki is not to be trusted. Verify everything.
* Read [Trust]

# Host preparation #
## Building on Linux ##
We recommend you use a dedicated OS installation just for hosting the Whonix VMs. (See [Security])

You need to use Debian. The build scripts could be adapted to run on other *NIX systems as well but currently they assume apt-get to be available. You need about 15 GB of free space.

Install the latest security updates, install Virtual Box (and qemu-kvm which is required to mount the Virtual Box .vdi images). Reboot to apply kernel updates.

    sudo apt-get update && sudo apt-get dist-upgrade
    sudo apt-get install virtualbox qemu genisoimage apt-cacher-ng grml-debootstrap parted kpartx debootstrap mksh dialog 
    sudo reboot

## Virtual Box inside Virtual Box ##
No longer required! (If you want build anonymity, read build anonymity above.)

If you are going to use Virtual Box inside Virtual Box, be sure to change your host key. Virtual Box -> Preferences -> Input -> Host Key. The "outside" and the "inside" Host Key must differ, otherwise you can not leave the VM "inside" anymore. The "outside" Virtual Box hostkey may NOT be **ctrl**.^1^

<font size="-3">
,,
^1^ Because the one is used by VBoxSDL "inside".
</font>

## Building on Windows ##
Building on Windows is no longer supported. Redistributed Whonix builds should be build on Linux. If you want to port the Whonix build scripts to Windows, please contact us. Running Whonix on a Windows host with Virtual Box installed should is still possible.

## Using an apt cache to speed up downloading ##
If you want to build multiple times (for debugging etc.), it makes sense to install a local apt proxy on your build machine.^1^ That safes download time and traffic.^2^ If you build Whonix on Whonix, apt-cacher-ng will go through Tor's TransPort.

<font size="-3">
,,
^1^ Thanks to [source](https://linuxexpresso.wordpress.com/2011/02/13/howto-apt-cacher-ng-on-ubuntu/).
^2^ It would be possible to download without an apt-cacher. But why? If you want so ignore this chapter and change the mirror settings in grml configuration file.
</font>

Open /etc/apt/apt.conf.

    sudo nano /etc/apt/apt.conf

Add the following.

    # /etc/apt/apt.conf
    Acquire::http { Proxy "http://127.0.0.1:3142"; };

Restart apt-cacher-ng. Should not be required, but it was for me.

    sudo service apt-cacher-ng restart

Safe and test if it's working.

    sudo /usr/bin/apt-get update

# Source Code Intro #
**If you prefer to read and understand the source code just by reading scripts you may skip this optional chapter.** This chapter is dedicated to give an introduction into the Whonix source code. It can be quite difficult to get started with hacking existing big complex projects.

Files and folders overview:

* **whonix_gateway** All files within that folder will be copied into Whonix-Gateway.
* **whonix_workstation** All files within that folder will be copied into Whonix-Workstation.
* **whonix_shared** All files within that folder will be copied into Whonix-Gateway and Whonix-Workstation.
* Copying files into the virtual machine images is done with whonix_craetevm and implemented in int_copy_gateway, int_copy_workstation and int_copy_shared.
* **int_xxx** scripts are internally used by whonix_xxx scripts.

Overview:
(1.) grml-debootstrap creates virtual machine images in *.img image format*. It keeps care of creating the image, the partition table, minimal system debootstrap and apt-get installing all Whonix packages.
(2.) Copying is done in two steps, copyinto-pre and copyinto-post. Pre and post what? Chroot.
(3.) First the pre-files get copied into the virtual machine images.
(4.) whonix_internal_install_script runs inside chroot.
(5.) Then the post-files get copied into the virtual machine images.
(6.) The *.img image* gets converted to a *.vdi image*. Actually not converted, a new file will be created and the old *.img* remains available until cleanup is run or manually deleted or grml-debootstrap runs again.
(7.) The *.img format* is more "generic". Virtual Box does not support raw images, but *.vdi* and *.vmdk* (and others).
(8.) A virtual machine (Virtual Box) will be created and the *.vdi image* will be attached.
(9.) The virtual machines get exported to a *.ova images*.
(10.) Steps (8.) and (9.) can be easily replaced or support for additional virtualizers can be added.
(11.) That's it, basically. Now we got *.ova images*, which can be imported by the user.

More details:
**whonix_build** is a script, which simply runs all other scripts. Actually it's "optional". It has very little functionality beside running all other scripts. You are free to run all scripts one by one. That is useful for learning and for debugging purposes. In case you want to fix a bug or in case you want to upgrade the distribution or in case you want to switch the operating system or whatever you are better off running the steps manually. You can use the Build script as a reference for which steps have to be run in which order.

**whonix_createvm** uses grml-debootstrap to create *.img images*, creates Virtual Box machines with all settings required for secure networking, devices, security settings. Which those settings are in details can be again read in [Security] or the script itself. It also features mounting the virtual hdd images for debugging reasons. The whonix_internal_install_script will be copied into the virtual machine images by whonix_createvm. *./whonix_createvm -help* will show you available options and in which order all options have to be started.

**whonix_internal_install_script** A Whonix-Gateway specific version is stored under /home/user/Whonix/whonix_gateway/usr/local/share/whonix_internal_install_script and a Whonix-Workstation specific version is stored under /home/user/Whonix/whonix_gateway/usr/local/share/whonix_internal_install_script. This script gets copied into the Virtual Machines image by *sudo ./whonix_createvm -tX-copyinto-pre*. whonix_internal_install_script gets started by *sudo ./whonix_createvm -tX-chroot*. They will transform the installed operating system into the Whonix-Gateway or into the Whonix-Workstation. They install the Tor Browser (only on Whonix-Workstation), set up relevant privacy and anonymity required settings.

Summary:
Thus, given the nature of the build step orientated scripts, you can easily work on the the different aspects of Whonix. For example, once you have created a clean virtual machine with the operating system only, you can make a clone or snapshot, run either the whonix_Gateway or the whonix_Workstation script as often as you need to test your changes and if something goes wrong, go back to the clone or snapshot. You don't have to build everything from scratch again. ^3^

<font size="-3">
,,
^3^ If something would go wrong, you would have to reinstall the whole operating system every time again. That's why we use separate steps.
</font>

# Get the Whonix source code #

    git clone https://github.com/adrelanos/Whonix

# Verify the Whonix source code with gpg #
This is recommend but not required. See [Trust].

(1) Get adrelanos gpg key.

(2) Get a list of available git tags.

    git tag

(3) Verify the tag you want to build.

    # Replace with tag you want to build.
    git tag -v 0.4.5

(4) Output should look like the following.

    object 13870efc29018065267788f9f23026e6ff489684
    type commit
    tag 0.4.5
    tagger adrelanos <invalid@invalid> 1348681401 -0400

    0.4.5
    gpg: Signature made Wed Sep 26 17:43:26 2012 UTC using RSA key ID 713AAEEF
    gpg: Good signature from "proper <email @ removed>"

# Create the Images #
## Preparations ##
(1) Git checkout, which version you want to build.

    git checkout 0.4.5

(2) Make the build script executable: 

    chmod +x ~/Whonix/whonix_*

(3) Make sure there aren't any VMs in Virtual Box already called "Whonix-Gateway" or "Whonix-Workstation" (TODO: automate that)

(4) Check if /home/user/Whonix/usr/share/version for version number.

## VM Creation ##
(1) Open a shell and type:

    sudo ~/Whonix/whonix_build -all

(2) Check if all went ok.

The scripts can fail for many reasons, please report back any issues!

# Debugging #
**OPTIONAL** (Only in case something goes wrong or you want to audit or develop Whonix.)

## SSH into Whonix-Gateway ##
On Whonix-Gateway: Open /usr/local/bin/whonix_firewall

    sudo nano /usr/local/bin/whonix_firewall

Set GATEWAY_ALLOW_INCOMMING_SSH to 1.

    GATEWAY_ALLOW_INCOMMING_SSH=1

Restart firewall.

    sudo /usr/local/bin/whonix_firewall

Inside Whonix-Gateway: 

    # Run once.
    sudo apt-get install opensshd-server

On the host: 
Add port forwarding from host into Virtual Machine.

    # Run once.
    VBoxManage modifyvm "Whonix-Gateway" --natpf1 "ssh",tcp,127.0.0.1,2222,,22

On the host: 
Open a ssh session.

    # as user
    ssh user@127.0.0.1 -p 2222
    # or as root
    ssh root@127.0.0.1 -p 2222

On the host: 
Or mount Whonix-Gateway as a folder.

    # as user
    sshfs user@127.0.0.1:/ -p 2222 /home/user/whonix_binary/whonix-Gateway_sshfs
    # or as root
    sshfs root@127.0.0.1:/ -p 2222 /home/user/whonix_binary/whonix-Gateway_sshfs

## Mount and inspect images ##
** Broken in 0.4.5. Fixed in git master.**

Mount Whonix-Gateway *vdi* images.

    sudo ./whonix_createvm -tg-mountvdi

    cd "/home/user/whonix_binary/whonix-Gateway_image"
    # inspect
    cd ~

    sudo ./whonix_createvm -tg-unmountvdi

Mount Whonix-Workstation *vdi* images.

    sudo ./whonix_createvm -tw-mountvdi

    cd "/home/user/whonix_binary/whonix-Workstation_image"
    # inspect
    cd ~

    sudo ./whonix_createvm -tw-unmountvdi

Mount Whonix-Gateway *img* images.

    sudo ./whonix_createvm -tg-mountimg

    cd "/home/user/whonix_binary/whonix-Gateway_image"
    # inspect
    cd ~

    sudo ./whonix_createvm -tg-unmountimg

Mount Whonix-Workstation *img* images.

    sudo ./whonix_createvm -tw-mountimg

    cd "/home/user/whonix_binary/whonix-Workstation_image"
    # inspect
    cd ~

    sudo ./whonix_createvm -tw-unmountimg

# How to use the ova images #
Reboot both VMs. Please read the [Readme]!

# Final Steps (Only Required For Redistribution) #
* [LeakTests]!
* [Test] the images before release! TODO: Needs big revision with all Whonix features.
* Update the [Changelog].
* Create hash sums for verification.

    sha512sum Whonix-Gateway.ova
    sha512sum Whonix-Workstation.ova

* Upload the images.
* Post hash sums to build documentation.
* Post download links to build documentation.
* At least a few testers should test before posting a news. Testers may be found by posting a news.
* Finally announce: Post a news.
    * In Whonix Readme / News.
    * http://lists.debian.org/debian-derivatives/
    * debian-derivatives@lists.debian.org
    * tor-talk@lists.torproject.org
    * https://lists.torproject.org/pipermail/tor-talk/
    * whonix-devel@lists.sourceforge.net
    * https://lists.sourceforge.net/lists/listinfo/whonix-devel

# Changelog Next #
* Fixed htpdate_hourly. 
