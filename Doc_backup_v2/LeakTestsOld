<!DOCTYPE html>
<!-- Server: sfn-web-3 -->


  










<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]>    <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]>    <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]>    <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]>--> <html lang="en" class="no-js"> <!--<![endif]-->
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="content-type"/>
    <title>Whonix / Documentation / LeakTestsOld</title>
    

<script src="http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/js/sftheme/modernizr.custom.90514.js"></script>

<script src="http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/js/sftheme/jquery-1.8.0.min.js"></script>

<script src="http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/js/sftheme/header.js"></script>
<!--[if lt IE 7 ]>
  <script src="http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/js/sftheme/dd_belatedpng.js"></script>
  <script> DD_belatedPNG.fix('img, .png_bg'); //fix any <img> or .png_bg background-images </script>
<![endif]-->
<link href='//fonts.googleapis.com/css?family=Ubuntu:regular' rel='stylesheet' type='text/css'>
<style type="text/css">
    @font-face {
        font-family: "Pictos";
        src: url('http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/css/fonts/sftheme/pictos-web.eot');
        src: local("☺"), url('http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/css/fonts/sftheme/pictos-web.woff') format('woff'), url('http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/css/fonts/sftheme/pictos-web.ttf') format('truetype'), url('http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/css/fonts/sftheme/pictos-web.svg') format('svg');
    }
</style>
    <script type="text/javascript">
            /*jslint onevar: false, nomen: false, evil: true, css: true, plusplus: false, white: false, forin: true, on: true, immed: false */
            /*global confirm, alert, unescape, window, jQuery, $, net, COMSCORE */
    </script>
    
      <!-- ew:head_css -->

    
      <link rel="stylesheet"
                type="text/css"
                href="http://a.fsdn.com/allura/nf/1358968642/_ew_/allura/css/forge/hilite.css"
                >
    
      <link rel="stylesheet"
                type="text/css"
                href="http://a.fsdn.com/allura/nf/1358968642/_ew_/tool/wiki/css/wiki.css"
                >
    
      <link rel="stylesheet"
                type="text/css"
                href="http://a.fsdn.com/allura/nf/1358968642/_ew_/theme/sftheme/css/forge.css"
                >
    
      <link rel="stylesheet"
                type="text/css"
                href="http://a.fsdn.com/allura/nf/1358968642/_ew_/_slim/css?href=css%2Fmarkitup_sf.css%3Bcss%2Fpage_list.css"
                >
    
      <style>
            input.label_edit{ float: left; }
            .tagEditor{
                margin: 4px 0;
                padding: 0;
                float: left;
            }

            .tagEditor li, .removable{
                display: inline;
                background-image: url('http://a.fsdn.com/allura/nf/1358968642/_static_/images/minus_small.png');
                background-color: #eef;
                background-position: right center;
                background-repeat: no-repeat;
                list-style-type: none;
                padding: 0 18px 0 6px;
                margin: 0 4px;
                cursor: pointer;
                -moz-border-radius: 5px;
                -webkit-border-radius: 5px;
            }

            .tagEditor li:hover{
                background-color: #ebebeb;
            }</style>
    
      
<!-- /ew:head_css -->

    
    
    
      <!-- ew:head_js -->

    
      
<!-- /ew:head_js -->

    
    

    
      <style type="text/css">
        #page-body.project---init-- #top_nav { display: none; }
#page-body.project---init-- #nav_menu_holder { display: none; margin-bottom: 0; }
#page-body.project---init-- #content_base {margin-top: 0; }
      </style>
    
    
<style>
  .hidden { display: none }
  a.notfound { color: #f00; }
</style>

      <style>.XGzrLzwekgQcoOfRccgALjSc { display:none }</style>

    
<link rel="alternate" type="application/rss+xml" title="Page RSS" href="feed.rss"/>
<link rel="alternate" type="application/atom+xml" title="Page Atom" href="feed.atom"/>
<link rel="alternate" type="application/rss+xml" title="Wiki RSS" href="../feed.rss"/>
<link rel="alternate" type="application/atom+xml" title="Wiki Atom" href="../feed.atom"/>

    
    


<script type="text/javascript">
    var _gaq = _gaq || [];

    function _add_tracking(prefix, tracking_id, send_user) {
        _gaq.push([prefix+'._setAccount', tracking_id]);
        _gaq.push([prefix+'._setCustomVar', 1, 'Page Type', 'wiki', 3]);_gaq.push([prefix+'._trackPageview']);
    }
      _add_tracking('sfnt1', 'UA-32013-6', true);
      _add_tracking('sfnt2', 'UA-36130941-1', true);
    

    (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
  </head>

  <body class="wiki-LeakTestsOld" id="forge">
    
      <!-- ew:body_top_js -->

    
      
<!-- /ew:body_top_js -->

    
    
<header id="site-header">
    <div class="wrapper">
        <a href="/" class="logo">
            <span>SourceForge</span>
        </a>
        
        <form method="get" action="/directory/">
            <input type="text" id="words" name="q" placeholder="Search">
        </form>
        
        <!--Switch to {language}-->
        <nav id="nav-site">
            <a href="/directory/" title="Browse our software.">Browse</a>
            <a href="/blog/" title="Read the latest news from the SF HQ.">Blog</a>
            <a href="/support" title="Contact us for help and feedback.">Help</a>
        </nav>
        <nav id="nav-account">
            
              <div class="logged_out">
                <a href="/account/login.php">Log In</a>
                <span>or</span>
                <a href="https://sourceforge.net/user/registration/">Join</a>
              </div>
            
        </nav>
        
    </div>
</header>
<header id="site-sec-header">
    <div class="wrapper">
        <nav id="nav-hubs">
            <h4>Solution Centers</h4>
            <a href="http://ibmsmartercommerce.sourceforge.net/">Smarter Commerce</a>
            <a href="http://goparallel.sourceforge.net/">Go Parallel</a>
            <a href="http://html5center.sourceforge.net/">HTML5</a>
            <a href="http://ibmsmarteritservices.sourceforge.net/">Smarter IT</a>
        </nav>
        <nav id="nav-collateral">
            <a href="/jobs?source=header">Jobs</a>
            <a href="http://library.geeknetmedia.com">Resources</a>
            
            <a href="">Newsletters</a>
            
        </nav>
    </div>
</header>
    
    <section id="page-body" class=" neighborhood-Projects project-whonix mountpoint-wiki">
	  <div class="grid-24" id="nav_menu_holder">
            
            


  
  <a href="/p/whonix/">
    
      <img src="/p/whonix//icon?2012-10-18 23:06:52+00:00" class="project_icon" alt="Project Logo">
    
	<h1 class="project_title">
      
        Whonix
      
	</h1>
	</a>

            
      </div>
      <div id="top_nav" class="">
        
        
  
    <a href="/p/whonix/homelink/" class="ui-icon-tool-link">
      Homepage
      
        
      
      
      
    </a>
	
    <a href="/p/whonix/wiki/" class="ui-icon-tool-wiki">
      Documentation
      
        
          <span class="diamond"></span>
        
      
      
      
    </a>
	
    <a href="/p/whonix/blog/" class="ui-icon-tool-blog">
      Important Blog
      
        
      
      
      
    </a>
	
    <a href="/p/whonix/featureblog/" class="ui-icon-tool-blog">
      Feature Blog
      
        
      
      
      
    </a>
	
    <a href="/projects/whonix/files/" class="ui-icon-tool-files">
      _
      
        
      
      
      
    </a>
	
    <a href="/p/whonix/discussion/" class="ui-icon-tool-discussion">
      User Help Forum
      
        
      
      
      
    </a>
	
    <a href="/p/whonix/mailman/" class="ui-icon-tool-mailman">
      Developer Mailing List
      
        
      
      
      
    </a>
	
    <a href="/p/whonix/code/" class="ui-icon-tool-git">
      Source Code
      
        
      
      
      
    </a>
	
    <a href="/p/whonix/donate/" class="ui-icon-tool-link">
      Donate
      
        
      
      
      
    </a>
	
	<div style="clear:both"></div>

        
      </div>
      <div id="content_base">
			  
          
        
			  
          
        
        <div class="grid-24 pad">
          <h2 class="dark title">LeakTestsOld
            <!-- actions -->
            <small>
            
  
    
    <a href="history" title="History"><b data-icon="N" class="ico ico-history" title="History"></b></a>
  
  
	<a href="feed" title="RSS"><b data-icon="f" class="ico ico-feed" title="Feed"></b></a>
  <a href="../search" title="Search"><b data-icon="s" class="ico ico-search" title="Search"></b></a>

            </small>
            <!-- /actions -->
          </h2>
		
  

          <div>
            
            
  
<div class="markdown_content"><p><a class="" href="https://sourceforge.net/p/whonix/wiki/Home/">Whonix Homepage</a> </p>
<p><strong>Old instructions for copy and paste. This is available now as a script, see <a class="alink" href="/p/whonix/wiki/LeakTests/">[LeakTests]</a>.</strong></p>
<div class="toc">
<ul>
<li><a href="#leak-through-the-whonix-gateway">Leak through the Whonix-Gateway</a><ul>
<li><a href="#step-0-restrict-tor-outgoing-ports-while-testing">Step 0: restrict Tor outgoing ports while testing</a></li>
<li><a href="#step-1-prepare-the-testing-infrastructure">Step 1: Prepare the testing infrastructure</a></li>
<li><a href="#step-2-verify-wireshark-is-installed-and-working">Step 2: Verify Wireshark is installed and working</a></li>
<li><a href="#step-3-verify-scapy-is-installed-and-working">Step 3: Verify Scapy is installed and working</a></li>
<li><a href="#step-4-do-a-simple-ping-test">Step 4: Do a simple ping test</a></li>
<li><a href="#step-5-setting-up-a-non-tor-traffic-capture-with-wireshark">Step 5: Setting up a “non-Tor traffic” capture with Wireshark</a></li>
<li><a href="#step-6-scapy-traffic-testing-ip-packets">Step 6: Scapy traffic testing: IP packets</a></li>
<li><a href="#step-7-scapy-traffic-testing-tcp-packets-and-ports">Step 7: Scapy traffic testing: TCP packets and ports</a></li>
<li><a href="#step-8-scapy-traffic-testing-udp-packets-and-ports">Step 8: Scapy traffic testing: UDP packets and ports</a></li>
<li><a href="#step-9-undo-step-0">Step 9: undo Step 0</a></li>
</ul>
</li>
</ul>
</div>
<p>This leak testing article was written by adrelanos and smarm for Whonix but it can be useful for other projects as well.</p>
<p>Discussion: “Leak testing” (as defined here), is the process of verifying that the Whonix-Gateway will not send unencrypted / “in the clear” network traffic.  Only Tor traffic should be observed coming from the Whonix-Gateway.</p>
<h1 id="leak-through-the-whonix-gateway">Leak through the Whonix-Gateway</h1>
<p>Due to misconfiguration of the Whonix-Gateway the Whonix-Gateway might forward traffic for Whonix-Workstation which goes not trough Tor. The following tests are designed to test for such behaviour.</p>
<h2 id="step-0-restrict-tor-outgoing-ports-while-testing">Step 0: restrict Tor outgoing ports while testing</h2>
<p>Why we do this will be clarified in Step 5.</p>
<p>'nano /etc/tor/torrc' and uncomment</p>
<div class="codehilite"><pre><span class="c">#+# #OptionalFeatureNr.6#</span>
<span class="c">#+# See Whonix/LeakTests. Activate this while testing for leaks. (Step 0)</span>
<span class="c">#+# Deactivate after you are done! (Important!) (Step 9)</span>
<span class="n">ReachableDirAddresses</span><span class="o">*</span><span class="p">:</span>80
<span class="n">ReachableORAddresses</span><span class="o">*</span><span class="p">:</span>443
</pre></div>
<p>and restart Tor using '/etc/init.d/tor restart'</p>
<p>This has to be undone after you finished testing. You will be reminded at the end of this chapter.</p>
<h2 id="step-1-prepare-the-testing-infrastructure">Step 1: Prepare the testing infrastructure</h2>
<p>Three tools are used during testing:</p>
<p><a class="" href="http://en.wikipedia.org/wiki/Scapy" rel="nofollow">Scapy</a>: To create network traffic for testing.  It is also desirable that the network traffic used in testing does not expose you to possible violations of security!  Thus Scapy offers fine grained control over the creation of traffic for use with testing.  Functionality defined here can be formalized into <a class="alink notfound" href="../http%3A//en.wikipedia.org/wiki/Unit_test%20%E2%80%9CUnit%20Tests%E2%80%9D"></a><a href="http://en.wikipedia.org/wiki/Unit_test" rel="nofollow"></a><a href="http://en.wikipedia.org/wiki/Unit_test" rel="nofollow">http://en.wikipedia.org/wiki/Unit_test</a> “Unit Tests” via <a class="" href="http://www.secdev.org/projects/UTscapy/" rel="nofollow">UTScapy</a>.</p>
<p><a class="" href="http://en.wikipedia.org/wiki/Wireshark" rel="nofollow">Wireshark</a>: Used to sniff network traffic.  Can be configured with fine grained <a class="" href="http://www.wireshark.org/docs/wsug_html_chunked/ChCapCaptureFilterSection.html" rel="nofollow">“Capture Filters”</a>, which can filter the traffic reported and captured by wireshark while sniffing traffic.</p>
<p><a class="" href="http://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="nofollow">Python</a>: Used to support Scapy and can be used to easily script Scapy tests.</p>
<p>Install <code>wireshark</code> to the Whonix-Gateway:</p>
<div class="codehilite"><pre><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">tshark</span>
</pre></div>
<p>Set capabilities to run wireshark with user privileges</p>
<div class="codehilite"><pre><span class="n">sudo</span> <span class="n">setcap</span> <span class="n">cap_net_raw</span><span class="p">,</span><span class="n">cap_net_admin</span><span class="p">=</span><span class="n">eip</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">dumpcap</span>
</pre></div>
<p>Install <code>scapy</code> to the Whonix-Workstation:</p>
<div class="codehilite"><pre><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">python</span><span class="o">-</span><span class="n">scapy</span>
</pre></div>
<p>(This automatically installs Python as a dependency of Scapy)</p>
<h2 id="step-2-verify-wireshark-is-installed-and-working">Step 2: Verify Wireshark is installed and working</h2>
<p>(Whonix-Gateway)</p>
<p><strong>Warning</strong>: It is is unadvisable to run Wireshark as root. 'su user'</p>
<p>Starting <code>Wireshark</code> without options will begin to capture packets on the first available interface:</p>
<div class="codehilite"><pre><span class="n">tshark</span>
</pre></div>
<p>You should see packets begin to scroll down the screen.  This indicates you are seeing normal network traffic (ARP, DHCP requests, Tor traffic, etc).  This will give you some idea of what to look for when we test for “leaked” traffic below.</p>
<h2 id="step-3-verify-scapy-is-installed-and-working">Step 3: Verify Scapy is installed and working</h2>
<p>(Whonix-Workstation)</p>
<p>Start Scapy with elevated privileges to allow both sending and receiving of packets:</p>
<div class="codehilite"><pre><span class="n">sudo</span> <span class="n">scapy</span>
</pre></div>
<p>This should present you with an interactive prompt:</p>
<div class="codehilite"><pre><span class="n">Welcome</span> <span class="n">to</span> <span class="n">Scapy</span> 2<span class="p">.</span>1<span class="p">.</span>0
<span class="o">&gt;&gt;&gt;</span>
</pre></div>
<p>Other “WARNING” or “INFO” items that appear when you start Scapy, are most likely not going to effect your use of Scapy for this testing.</p>
<p>Type the <code>ls()</code> command, to see an overview of the protocols supported by Scapy:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">ls</span><span class="p">()</span>
</pre></div>
<p>Type the <code>ls()</code> command and pass it a protocol type, to see information supported by that protocol and its packet construction:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">ls</span><span class="p">(</span><span class="n">IP</span><span class="p">)</span>
</pre></div>
<p>Type the <code>exit()</code> command to end your interactive session with Scapy:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">exit</span><span class="p">()</span>
</pre></div>
<p>See more information at the official <a class="" href="http://www.secdev.org/projects/scapy/doc/usage.html#" rel="nofollow">Scapy documentation</a>.</p>
<h2 id="step-4-do-a-simple-ping-test">Step 4: Do a simple ping test</h2>
<p>(Whonix-Workstation)</p>
<p>Since Scapy is scriptable via Python, we'll use Scapy from within a Python script for our testing.  An example script that creates a simple ICMP ping to the Whonix-Gateway's <code>eth1</code> interface:</p>
<div class="codehilite"><pre><span class="n">nano</span> <span class="n">simple_ping</span><span class="p">.</span><span class="n">py</span>
</pre></div>
<p>Paste this code and save.</p>
<table class="codehilitetable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36</pre></div></td><td class="code"><div class="codehilite"><pre><span class="c">#! /usr/bin/env python</span>

<span class="c"># Since it will be useful to know something about the script, for the later tests, the terms are defined here:</span>
<span class="c"># (A discussion of Python language structure is beyond the scope of this document)</span>

<span class="c"># [1] http://en.wikipedia.org/wiki/Ipv4</span>
<span class="c"># [2] http://en.wikipedia.org/wiki/Internet_Control_Message_Protocol</span>
<span class="c"># [3] http://en.wikipedia.org/wiki/IP_routing</span>
<span class="c"># [4] http://en.wikipedia.org/wiki/Ping</span>
<span class="c"># [5] http://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#List_of_permitted_control_messages_.28incomplete_list.29</span>
<span class="c"># [6] http://www.secdev.org/projects/scapy/doc/usage.html#send-and-receive-packets-sr</span>
<span class="c"># [7] http://www.secdev.org/projects/scapy/doc/usage.html#stacking-layers</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">scapy.all</span> <span class="kn">import</span><span class="o">*</span>

<span class="c"># define the target gateway &amp; data payload</span>
<span class="n">target</span> <span class="c"># &quot;192.168.0.1&quot;</span>
<span class="n">data</span> <span class="c"># &quot;testing&quot;</span>

<span class="c"># define packets</span>
<span class="c"># These define two variables, that are set to the object types IP and ICMP respectively. These objects in Scapy define the protocol type for IP (default IPv4) [1] and ICMP [2] respectively. And will send packets on the wire of these types when used. </span>
<span class="n">ip</span> <span class="c"># IP()</span>
<span class="n">icmp</span> <span class="c"># ICMP()</span>

<span class="c"># define packet parameters</span>
<span class="n">ip</span><span class="o">.</span><span class="n">dst</span> <span class="c"># target</span>

<span class="c"># IP packets are used for routing [3] between networks on the Internet. So, we assign the destination (**dst**) in the IP portion of the packet we're going to assemble and send out.</span>
<span class="n">icmp</span><span class="o">.</span><span class="n">type</span> <span class="c"># 8</span>
<span class="n">icmp</span><span class="o">.</span><span class="n">code</span> <span class="c"># 0</span>

<span class="c"># Defines the type of ICMP message to send out. The **8 type** is a type defined as **echo request**, e.g. a simple ping [4]. See a list here of  various types of ICMP [5] messages here.</span>

<span class="c"># The  sr1() [6] command will **send and receive network traffic, returning the 1st packet received**.</span>
<span class="c"># The notation of **ip/icmp/data** is the notation for encapsulation of various instances of networking protocols [7]. Read it right to left: **data encapsulated inside an ICMP message and encapsulated inside an IP datagram**.</span>
</pre></div>
</td></tr></table>
<p>test_ping # sr1(ip/icmp/data)</p>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">isinstance</span><span class="p">(</span><span class="n">test_ping</span><span class="p">,</span> <span class="n">types</span><span class="p">.</span><span class="n">NoneType</span><span class="p">):</span>
        <span class="n">print</span> &quot;<span class="n">No</span> <span class="n">response</span>&quot;
<span class="k">else</span><span class="p">:</span>
# <span class="n">Prints</span> <span class="n">a</span> <span class="n">short</span> <span class="n">report</span> <span class="n">on</span> <span class="n">the</span> <span class="n">packet</span> <span class="n">received</span> <span class="p">(</span><span class="k">if</span> <span class="n">any</span><span class="p">).</span> 
        <span class="n">test_ping</span><span class="p">.</span><span class="n">summary</span><span class="p">()</span>
</pre></div>
<p>Which will report the first successful ping from <code>eth1</code> on the  Whonix-Gateway.</p>
<p>To test, simply:</p>
<div class="codehilite"><pre><span class="n">sudo</span> <span class="n">python</span> <span class="n">simple_ping</span><span class="p">.</span><span class="n">py</span>
</pre></div>
<p>Which will report with something similar to:</p>
<div class="codehilite"><pre><span class="n">Begin</span> <span class="n">emission</span><span class="p">:</span>
<span class="p">.....</span><span class="n">Finished</span> <span class="n">to</span> <span class="n">send</span> 1 <span class="n">packets</span><span class="p">.</span>
<span class="o">.*</span>
<span class="n">Received</span> 7 <span class="n">packets</span><span class="p">,</span> <span class="n">got</span> 1 <span class="n">answers</span><span class="p">,</span> <span class="n">remaining</span> 0 <span class="n">packets</span>
</pre></div>
<h2 id="step-5-setting-up-a-non-tor-traffic-capture-with-wireshark">Step 5: Setting up a “non-Tor traffic” capture with Wireshark</h2>
<p>(Whonix-Gateway)</p>
<p>The command:</p>
<div class="codehilite"><pre><span class="n">sudo</span> <span class="o">-</span><span class="n">u</span> <span class="n">user</span> <span class="n">tshark</span> <span class="o">-</span><span class="nb">i</span> <span class="n">eth0</span> <span class="o">-</span><span class="n">S</span> <span class="o">-</span><span class="n">f</span> &quot;<span class="n">ip</span> <span class="n">and</span> <span class="n">src</span> <span class="n">host</span> 10<span class="p">.</span>0<span class="p">.</span>2<span class="p">.</span>15 <span class="n">and</span> <span class="n">not</span> <span class="p">(</span><span class="n">port</span> 80 <span class="n">or</span> <span class="n">port</span> 443 <span class="n">or</span> <span class="n">port</span> 9001 <span class="n">or</span> <span class="n">port</span> 9030 <span class="n">or</span> <span class="n">ssh</span><span class="p">)</span>&quot;
</pre></div>
<p>(if you are not using VirtualBox NAT, you have to change the IP to your eth0 ip address, to find out that address type 'ifconfig')<br />
(TODO: make the command independent from the IP, use eth0)</p>
<p>When started wireshark should show NO packet information on the screen, as opposed to above where we capture Everything.  To verify it's working correctly (and logging something, as opposed to logging nothing), (open a second SSH session or learn 'screen') from your Whonix-Gateway attempt to ping google.com.  This should show something similar to:</p>
<div class="codehilite"><pre>5<span class="p">.</span>115829 <span class="o">&lt;</span><span class="n">eth0</span> <span class="n">IP</span> <span class="n">address</span><span class="o">&gt;</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="n">nearby</span> <span class="n">Google</span> <span class="n">mirror</span><span class="o">&gt;</span> <span class="n">ICMP</span> 98 <span class="n">Echo</span> <span class="p">(</span><span class="n">ping</span><span class="p">)</span> <span class="n">request</span>  <span class="n">id</span>#0<span class="n">x1010</span><span class="p">,</span>
</pre></div>
<p>seq#1/256, ttl#64<br />
  5.184410  -&gt;  DNS 86 Standard query PTR <br />
.in-addr.arpa</p>
<p>Where the IP and DNS names have been redacted to protect the innocent.</p>
<p>Leave this capture running for subsequent tests.</p>
<p><strong>Discussion</strong>:</p>
<p>(See the <a class="" href="http://www.wireshark.org/docs/man-pages/tshark.html" rel="nofollow">tshark manual page</a> for more information)</p>
<p><strong>-S</strong>: Decode and display packets even while writing raw packet data using the -w option.</p>
<p><strong>-i</strong>: Set the name of the network interface or pipe to use for live packet capture.</p>
<p><strong>-f</strong>: Set the capture filter expression.</p>
<p>The “capture expression” (the bit in quotes above, after the '-f') reads: IP packets and from host 10.0.2.15 (your <strong>eth0 IP</strong> address) where the ports are NOT 80, 443, 9901 or 9030 (<a class="" href="https://trac.torproject.org/projects/tor/wiki/doc/TorFAQ#DoIhavetoopenalltheseoutboundportsonmyfirewall" rel="nofollow">common ports for Tor, see the FAQ</a>).  The “ssh” keyword on the end is a predefined primitive in wireshark, used to define SSH traffic only.  Adding this should not effect your capture if you are not using SSH to connect to the gateway, but should save you quite a bit of trouble filtering out your SSH traffic if you are.</p>
<p>See the <a class="" href="http://www.wireshark.org/docs/wsug_html_chunked/ChCapCaptureFilterSection.html" rel="nofollow">documentation for the format of the “capture filter” here</a>, for more information.</p>
<p>(Note: This may not cover all valid TOR traffic emiting from your Whonix, some Tor nodes may use non-standard ports and was observed during testing.  The FAQ above, also covers this.)</p>
<h2 id="step-6-scapy-traffic-testing-ip-packets">Step 6: Scapy traffic testing: IP packets</h2>
<p>(Whonix-Workstation)</p>
<p>Other testing is in the same vein as our ping (above).</p>
<p><strong>First</strong>: We'll test IP datagrams of all types to see if any are emitted:</p>
<div class="codehilite"><pre><span class="n">nano</span> <span class="n">exhaustive_ip_send</span><span class="p">.</span><span class="n">py</span>
</pre></div>
<p>Paste this code and save.</p>
<table class="codehilitetable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="codehilite"><pre><span class="c">#! /usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">scapy.all</span> <span class="kn">import</span><span class="o">*</span>

<span class="c">#define the target gateway &amp; data payload</span>
<span class="n">target</span> <span class="c"># &quot;google.com&quot;</span>
<span class="n">data</span> <span class="c"># &quot;testing&quot;</span>

<span class="c">#define packet</span>
<span class="n">ip</span> <span class="c"># IP()</span>

<span class="c">#define packet parameters</span>
<span class="n">ip</span><span class="o">.</span><span class="n">dst</span> <span class="c"># target</span>

<span class="c">#loop through all IP packet types</span>
<span class="k">for</span> <span class="n">ip_type</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">):</span>
        <span class="n">ip</span><span class="o">.</span><span class="n">proto</span> <span class="c"># ip_type</span>
        <span class="n">send</span><span class="p">(</span><span class="n">ip</span><span class="o">/</span><span class="n">data</span><span class="p">)</span>
</pre></div>
</td></tr></table>
<p>Run</p>
<div class="codehilite"><pre><span class="n">sudo</span> <span class="n">python</span> <span class="n">exhaustive_ip_send</span><span class="p">.</span><span class="n">py</span>
</pre></div>
<p>On Whonix-Gateway you should see NO output from Wireshark.  Otherwise you may have discovered a leak. <a class="" href="http://en.wikipedia.org/wiki/IPv4#Packet_structure" rel="nofollow">Documentation on IP packet structure</a> and <a class="" href="http://en.wikipedia.org/wiki/List_of_IP_protocol_numbers" rel="nofollow">IP Protocol numbers</a>.</p>
<h2 id="step-7-scapy-traffic-testing-tcp-packets-and-ports">Step 7: Scapy traffic testing: TCP packets and ports</h2>
<p>(Whonix-Workstation)</p>
<p><strong>Second</strong>: We'll test TCP packets across all ports:<br />
(Note: This may appear as an <strong>ATTACK</strong> from some conservative ISP's / sites, use with caution.  Google fields many of these types of scan's per day, so testing like this is most likely lost in the noise)</p>
<div class="codehilite"><pre><span class="n">nano</span> <span class="n">tcp_test</span><span class="p">.</span><span class="n">py</span>
</pre></div>
<p>Paste this code and safe.</p>
<table class="codehilitetable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="codehilite"><pre><span class="c">#! /usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">scapy.all</span> <span class="kn">import</span><span class="o">*</span>

<span class="c">#define the target gateway &amp; data payload</span>
<span class="n">target</span> <span class="c"># &quot;google.com&quot;</span>
<span class="n">data</span> <span class="c"># &quot;testing&quot;</span>

<span class="c">#define packets</span>
<span class="n">ip</span> <span class="c"># IP()</span>
<span class="n">tcp</span> <span class="c"># TCP()</span>

<span class="c">#define packet parameters</span>
<span class="n">ip</span><span class="o">.</span><span class="n">dst</span> <span class="c"># target</span>

<span class="c">#loop through all TCP ports</span>
<span class="k">for</span> <span class="n">tcp_port</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">65535</span><span class="p">):</span>
        <span class="n">tcp</span><span class="o">.</span><span class="n">dport</span> <span class="c"># tcp_port</span>
        <span class="n">send</span><span class="p">(</span><span class="n">ip</span><span class="o">/</span><span class="n">tcp</span><span class="o">/</span><span class="n">data</span><span class="p">)</span>
</pre></div>
</td></tr></table>
<p>Run</p>
<div class="codehilite"><pre><span class="n">sudo</span> <span class="n">python</span> <span class="n">tcp_test</span><span class="p">.</span><span class="n">py</span>
</pre></div>
<p>Again Whonix-Gateway should report NO activity, otherwise we've found a leak <a class="" href="http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers" rel="nofollow">TCP / UDP port number documentation</a>.</p>
<h2 id="step-8-scapy-traffic-testing-udp-packets-and-ports">Step 8: Scapy traffic testing: UDP packets and ports</h2>
<p>(Whonix-Workstation)</p>
<p><strong>Third</strong>: We'll test UDP packets across all ports:</p>
<p>(Note: This may also be construed as an attack, Google is a good target for this, just as with the TCP test)</p>
<div class="codehilite"><pre><span class="n">nano</span> <span class="n">udp_test</span><span class="p">.</span><span class="n">py</span>
</pre></div>
<p>Paste this code and safe.</p>
<table class="codehilitetable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="codehilite"><pre><span class="c">#! /usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">scapy.all</span> <span class="kn">import</span><span class="o">*</span>

<span class="c">#define the target gateway &amp; data payload</span>
<span class="n">target</span> <span class="c"># &quot;google.com&quot;</span>
<span class="n">data</span> <span class="c"># &quot;testing&quot;</span>

<span class="c">#define packets</span>
<span class="n">ip</span> <span class="c"># IP()</span>
<span class="n">udp</span> <span class="c"># UDP()</span>

<span class="c">#define packet parameters</span>
<span class="n">ip</span><span class="o">.</span><span class="n">dst</span> <span class="c"># target</span>

<span class="c">#loop through all TCP ports</span>
<span class="k">for</span> <span class="n">udp_port</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">65535</span><span class="p">):</span>
        <span class="n">udp</span><span class="o">.</span><span class="n">dport</span> <span class="c"># udp_port</span>
        <span class="n">send</span><span class="p">(</span><span class="n">ip</span><span class="o">/</span><span class="n">udp</span><span class="o">/</span><span class="n">data</span><span class="p">)</span>
</pre></div>
</td></tr></table>
<p>Run</p>
<div class="codehilite"><pre><span class="n">sudo</span> <span class="n">python</span> <span class="n">udp_test</span><span class="p">.</span><span class="n">py</span>
</pre></div>
<p>Again, check for leaks. <a class="" href="http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers" rel="nofollow">TCP / UDP port number documentation</a>.</p>
<h2 id="step-9-undo-step-0">Step 9: undo Step 0</h2>
<p>Undo Step 0 now!</p></div>

  <div id="create_wiki_page_holder" title="Create New Page" style="display:none">
    <form>
        <label class="grid-2">Name</label>
        <div class="grid-7"><input type="text" name="name"/></div>
    </form>
  </div>

          </div>
			
          
  <hr class="grid-19" style="margin-top: 1em; margin-bottom: 2em; clear:both;">
  
  
    <h4>Related</h4>
    <p>
    
      <a href="/p/whonix/wiki/LeakTests/">Wiki: LeakTests</a><br>
    
      <a href="/p/whonix/wiki/Threat%20Model/">Wiki: Threat Model</a><br>
    
      <a href="/p/whonix/wiki/Download/">Wiki: Download</a><br>
    
    </p>
  
  

        </div>
      </div>
    </section>
      
<footer id="site-footer">
    <div class="wrapper">
        <nav>
            <h5>SourceForge</h5>
            <a href="/about">About</a>
            <a href="/blog/category/sitestatus/">Site Status</a>
            <a href="http://twitter.com/sfnet_ops">@sfnet_ops</a>
        </nav>
        <nav>
            <h5>Find and Develop Software</h5>
            <a href="/create/">Create a Project</a>
            <a href="/directory/">Software Directory</a>
            <a href="/top">Top Downloaded Projects</a>
        </nav>
        <nav>
            <h5>Community</h5>
            <a href="/blog/">Blog</a>
            <a href="http://twitter.com/sourceforge">@sourceforge</a>
            <a href="/jobs?source=footer">Job Board</a>
        </nav>
        <nav>
            <h5>Help</h5>
            <a href="/apps/trac/sourceforge/wiki/WikiStart">Site Documentation</a>
            <a href="/support">Support Request</a>
            <a href="https://sourceforge.net/p/forge/documentation/Support%20via%20IRC/">Real-Time Support</a>
        </nav>
    </div>
</footer>
<footer id="site-copyright-footer">
    <div class="wrapper">
        <div id="copyright">
            Copyright &copy; 2013 SourceForge. All Rights Reserved.<br />
            SourceForge is a <a href="http://www.diceholdingsinc.com/phoenix.zhtml?c=211152&amp;p=irol-landing">Dice Holdings, Inc.</a> company.
        </div>
        <nav>
            <a href="http://geeknetmedia.com/terms-of-use">Terms</a>
            <a href="http://geeknetmedia.com/privacy-statement/">Privacy</a>
            <a href="http://geeknetmedia.com/opt-out-choices">Cookies/Opt Out</a>
            <a href="http://geeknetmedia.com">Advertise</a>
            <a href="http://sourceforge.jp/">SourceForge.JP</a>
        </nav>
    </div>
</footer>
    <div id="messages">
        
    </div>
    
      <!-- ew:body_js -->

    
      <script type="text/javascript" src="http://a.fsdn.com/allura/nf/1358968642/_ew_/_slim/js?href=allura%2Fjs%2Fjquery-base.js%3Ballura%2Fjs%2Fjquery.notify.js%3Ballura%2Fjs%2Fsylvester.js%3Ballura%2Fjs%2Fpb.transformie.min.js%3Ballura%2Fjs%2Fallura-base.js%3Bjs%2Fjquery.lightbox_me.js%3Bjs%2Fjquery.autosize-min.js%3Bjs%2Fjquery.textarea.js%3Bjs%2Fsf_markitup.js%3Bjs%2Fjquery.tag.editor.js"></script>
    
      
<!-- /ew:body_js -->

    
    
      <!-- ew:body_js_tail -->

    
      <script type="text/javascript">$(function () {
            var $lightbox = $('#lightbox_create_wiki_page');
            var $trigger = $('#sidebar a.add_wiki_page');
            $trigger.bind('click', function(e) {
                $lightbox.lightbox_me();
                return false;
            });
            $($lightbox).delegate('.close', 'click', function(e) {
                $lightbox.trigger('close');
                return false;
            });
        });
$(function () {
            $('#lightbox_create_wiki_page form').submit(function(){
                location.href = $('#sidebar a.add_wiki_page').attr('href') +
                    encodeURIComponent($('input[name=name]', $(this)).val().replace('/', '-')) + '/edit';
                return false;
            });
        });
$(function () {
            $('textarea.auto_resize').focus(function(){$(this).autosize();});
        });
$(document).ready(function () {
            $("a.attachment_form_add_button").click(function(evt){
                $(this).hide();
                $(".attachment_form_fields", this.parentNode).show();
                evt.preventDefault();
            });
            $("a.cancel_edit_post").click(function(evt){
                $("textarea", this.parentNode).val($("input.original_value", this.parentNode).val());
                $(".attachment_form_fields input", this.parentNode).val('');
                evt.preventDefault();
            });
         });

        (function () {
            $('div.discussion-post').each(function () {
                var post = this;
                $('.submit', post).button();
                $('.flag_post, .delete_post', post).click(function (ele) {
                    this.parentNode.submit();
                    return false;
                });
                if($('a.edit_post', post)){
                    $('a.edit_post', post).click(function (ele) {
                        $('.display_post', post).hide();
                        $('.edit_post_form', post).show();
                        $('.edit_post_form textarea', post).focus();
                        return false;
                    });
                    $("a.cancel_edit_post", post).click(function(evt){
                        $('.display_post', post).show();
                        $('.edit_post_form', post).hide();
                    });
                }
                if($('.reply_post', post)){
                    $('.reply_post', post).click(function (ele) {
                        $('.reply_post_form', post).show();
                        $('.reply_post_form textarea', post).focus();
                        return false;
                    });
                    $('.reply_post', post).button();
                }
                if($('.add_attachment', post)){
                    $('.add_attachment', post).click(function (ele) {
                        $('.add_attachment_form', post).show();
                        return false;
                    });
                }
                if($('.promote_to_thread', post)){
                    $('.promote_to_thread', post).click(function (ele) {
                        $('.promote_to_thread_form', post).show();
                        return false;
                    });
                }
                if($('.shortlink', post)){
                    var popup = $('.shortlink_popup', post);
                    $('.shortlink', post).click(function(evt){
                        evt.preventDefault();
                        popup.lightbox_me({
                            onLoad: function() {
                                $('input', popup).select();
                            }
                        });
                    });
                    $('.close', popup).bind('click', function() {
                        popup.hide();
                    });
                }
            });
        }());
        
$(function () {
            $('select.results_per_page').change(function () {
                this.form.submit();});});
$(function () {
          $('input.label_edit').tagEditor({
            confirmRemoval: false,
            completeOnSeparator: true,
            completeOnBlur: true
          });
        });

        $(document).ready(function () {
            var thread_tag = $('a.thread_tag');
            var thread_spam = $('a.sidebar_thread_spam');
            var tag_thread_holder = $('#tag_thread_holder');
            var allow_moderate = $('#allow_moderate');
            var mod_thread_link = $('#mod_thread_link');
            var mod_thread_form = $('#mod_thread_form');
            if (mod_thread_link.length) {
                if (mod_thread_form.length) {
                    mod_thread_link.click(function (e) {
                        mod_thread_form.show();
                        return false;
                    });
                }
            }
            if (thread_tag.length) {
                if (tag_thread_holder.length) {
                    var submit_button = $('input[type="submit"]', tag_thread_holder);
                    var cancel_button = $('<a href="#" class="btn link">Cancel</a>').click(function(evt){
                        evt.preventDefault();
                        tag_thread_holder.hide();
                        thread_tag.removeClass('active');
                    });
                    submit_button.after(cancel_button);
                    thread_tag.click(function (e) {
                        tag_thread_holder.show();
                        thread_tag.addClass('active');
                        // focus the submit to scroll to the form, then focus the subject for them to start typing
                        submit_button.focus();
                        $('input[type="text"]', tag_thread_holder).focus();
                        return false;
                    });
                }
            }
            if (thread_spam.length) {
                if (allow_moderate.length) {
                    var cval = $.cookie('_session_id');
                    thread_spam[0].style.display='block';
                }
            }
        });
        </script>
    
      
<!-- /ew:body_js_tail -->

    
    
  <div id="lightbox_create_wiki_page" class="modal" style="display:none">
  <b data-icon="D" class="ico ico-close close"></b>
  
    <h1>Add a Wiki Page</h1>
    <form class="grid-10">
        <label class="grid-2">Name</label>
        <div class="grid-7"><input type="text" name="name"></div>
        <label class="grid-2">&nbsp;</label>
        <div class="grid-7"><input type="submit" value="Create page"></div>
    </form>
  
</div>
<script type="text/javascript">
  /*<![CDATA[*/
  $('.post-link')
    .click(function(evt) {
        var cval = $.cookie('_session_id');
        evt.preventDefault();
        $.post(this.href, {_session_id:cval}, function(val)
            { window.location = val.location; },
            'json');
      });
  /*]]>*/
</script>
  

    
      
    
    
   
    
  </body>
</html>